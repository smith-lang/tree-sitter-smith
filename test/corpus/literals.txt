==================
positive int
==================

42

---

(source_file
    (expr
        (int)))

==================
negative int
==================

-42

---

(source_file
  (expr
    (unary_op
        (expr
            (int)))))

==================
positive float
==================

3.14

---

(source_file
    (expr
        (float)))

==================
negative float
==================

-3.14

---

(source_file
    (expr
        (unary_op
            (expr
                (float)))))

==================
string
==================

"Hello, World!"

---

(source_file
    (expr
        (str)))

==================
boolean true
==================

true

---

(source_file
    (expr
        (bool)))

==================
boolean false
==================

false

---

(source_file
    (expr
        (bool)))

==================
nested unary
==================

--42

---

(source_file
    (expr
        (unary_op
            (expr
                (unary_op
                    (expr
                         (int)))))))


==================
not operator
==================

not true

---

(source_file
    (expr
        (unary_op
            (expr
                (bool)))))

==================
not operator with parentheses
==================

not (5 > 3)

---

(source_file
    (expr
        (unary_op
            (expr
                (paren
                    (expr
                        (binary_op
                            left: (expr
                                (int))
                            right: (expr
                                (int)))))))))

==================
nested not operator
==================

not not false

---

(source_file
    (expr
        (unary_op
            (expr
                (unary_op
                    (expr
                        (bool)))))))

==================
not operator with function call
==================

not is_valid()

---

(source_file
    (expr
        (unary_op
            (expr
                (call
                    fn: (expr
                        (symbol)))))))

==================
array literal with no elements
==================

[]

---

(source_file
    (expr
        (array)))


==================
array literal with one element
==================

[1]

---

(source_file
    (expr
        (array
            (expr
                (int)))))

==================
array literal with two elements
==================

[1, 2]

---

(source_file
    (expr
        (array
            (expr
                (int))
            (expr
                (int)))))

==================
array literal with trailing comma
==================

[1, 2, ]

---

(source_file
    (expr
        (array
            (expr
                (int))
            (expr
                (int)))))


==================
nested array literal
==================

[[1, 2,],
 [3, 4,],]

---

(source_file
    (expr
        (array
            (expr
                (array
                    (expr
                        (int))
                    (expr
                        (int))))
            (expr
                (array
                    (expr
                        (int))
                    (expr
                        (int)))))))

==================
empty map
==================

{}

---

(source_file
    (expr
        (map)))

==================
map with one key value pair
==================

{ x: 42 }

---

(source_file
    (expr
        (map
            (pairs
                (pair
                    key: (symbol)
                    value: (expr
                        (int)))))))

==================
map with two key value pairs
==================

{ name: "joe", age: 21 }

---

(source_file
    (expr
        (map
            (pairs
                (pair
                    key: (symbol)
                    value: (expr
                        (str)))
                (pair
                    key: (symbol)
                    value: (expr
                        (int)))))))

==================
map with trailing comma
==================

{ name: "joe", age: 21 }

---

(source_file
    (expr
        (map
            (pairs
                (pair
                    key: (symbol)
                    value: (expr
                        (str)))
                (pair
                    key: (symbol)
                    value: (expr
                        (int)))))))
