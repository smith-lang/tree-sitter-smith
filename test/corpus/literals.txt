==================
positive int
==================

42

---

(source_file
  (statement
    (expression
      (integer_literal))))

==================
negative int
==================

-42

---

(source_file
  (statement
    (expression
      (unary_operation
          (expression
              (integer_literal))))))

==================
positive float
==================

3.14

---

(source_file
  (statement
      (expression
          (float_literal))))

==================
negative float
==================

-3.14

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (float_literal))))))

==================
string
==================

"Hello, World!"

---

(source_file
    (statement
      (expression
          (string_literal))))

==================
boolean true
==================

true

---

(source_file
    (statement
      (expression
          (boolean_literal))))

==================
boolean false
==================

false

---

(source_file
    (statement
      (expression
          (boolean_literal))))

==================
nested unary
==================

--42

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (unary_operation
                      (expression
                           (integer_literal))))))))


==================
not operator
==================

not true

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (boolean_literal))))))

==================
not operator with parentheses
==================

not (5 > 3)

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (parenthesized_expression
                      (expression
                          (binary_operation
                              left: (expression
                                  (integer_literal))
                              right: (expression
                                  (integer_literal))))))))))

==================
nested not operator
==================

not not false

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (unary_operation
                      (expression
                          (boolean_literal))))))))

==================
not operator with function call
==================

not is_valid()

---

(source_file
    (statement
      (expression
          (unary_operation
              (expression
                  (function_call
                      function: (expression
                          (identifier))))))))

==================
array literal with no elements
==================

[]

---

(source_file
    (statement
      (expression
          (array_literal))))


==================
array literal with one element
==================

[1]

---

(source_file
    (statement
      (expression
          (array_literal
              (expression
                  (integer_literal))))))

==================
array literal with two elements
==================

[1, 2]

---

(source_file
    (statement
      (expression
          (array_literal
              (expression
                  (integer_literal))
              (expression
                  (integer_literal))))))

==================
array literal with trailing comma
==================

[1, 2, ]

---

(source_file
    (statement
      (expression
          (array_literal
              (expression
                  (integer_literal))
              (expression
                  (integer_literal))))))


==================
nested array literal
==================

[[1, 2,],
 [3, 4,],]

---

(source_file
    (statement
      (expression
          (array_literal
              (expression
                  (array_literal
                      (expression
                          (integer_literal))
                      (expression
                          (integer_literal))))
              (expression
                  (array_literal
                      (expression
                          (integer_literal))
                      (expression
                          (integer_literal))))))))

==================
empty map
==================

{}

---

(source_file
    (statement
      (expression
          (map_literal))))

==================
map with one key value pair
==================

{ x: 42 }

---

(source_file
    (statement
      (expression
          (map_literal
              (map_pairs
                  (map_pair
                      key: (identifier)
                      value: (expression
                          (integer_literal))))))))

==================
map with two key value pairs
==================

{ name: "joe", age: 21 }

---

(source_file
    (statement
      (expression
          (map_literal
              (map_pairs
                  (map_pair
                      key: (identifier)
                      value: (expression
                          (string_literal)))
                  (map_pair
                      key: (identifier)
                      value: (expression
                          (integer_literal))))))))

==================
map with trailing comma
==================

{ name: "joe", age: 21, }

---

(source_file
    (statement
      (expression
          (map_literal
              (map_pairs
                  (map_pair
                      key: (identifier)
                      value: (expression
                          (string_literal)))
                  (map_pair
                      key: (identifier)
                      value: (expression
                          (integer_literal))))))))

==================
empty tuple
==================

()

---

(source_file
    (statement
      (expression
          (tuple_literal))))

==================
tuple with one element
==================

(42,)

---

(source_file
    (statement
      (expression
          (tuple_literal
              (expression
                  (integer_literal))))))

==================
tuple with two elements
==================

(42, "joe")

---

(source_file
    (statement
      (expression
          (tuple_literal
              (expression
                  (integer_literal))
              (expression
                  (string_literal))))))

==================
tuple with trailing comma
==================

(42, "joe",)

---

(source_file
    (statement
      (expression
          (tuple_literal
              (expression
                  (integer_literal))
              (expression
                  (string_literal))))))
